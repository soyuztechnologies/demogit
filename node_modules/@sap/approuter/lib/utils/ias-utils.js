'use strict';

const uaaUtils      = require('../utils/uaa-utils');
const urlUtils      = require('../utils/url-utils');
const _             = require('lodash');
const request       = require('request');
const NodeCache     = require('node-cache');
const zoneInfoCache = new NodeCache({stdTTL: 300, checkperiod: 320});

exports.getIasConfig        = getIasConfig;
exports.getIasCredentials   = getIasCredentials;
exports.getZoneInfo         = getZoneInfo;
exports.callZoneInfoAPI     = callZoneInfoAPI;

function getIasConfig(req, cb) {
  let iasOptions = req.extIasConfigOptions || req.routerConfig.iasConfig.options;
  if (req.app && req.app.approuter && req.app.approuter.resolveIasConfig) {
    req.app.approuter.resolveIasConfig(req, iasOptions, cb);
  } else {
    resolveIasConfig(req, iasOptions, cb);
  }
}

function resolveIasConfig(req, iasOptions, cb) {
  iasOptions = _.clone(iasOptions);
  let requestHost = urlUtils.getAppRouterHost(req);
  let tenantHostPattern = req.routerConfig.iasConfig.tenantHostPattern;
  if (!tenantHostPattern){
    cb (null,iasOptions);
  } else {
    let tenant = uaaUtils.retrieveTenantFromURL (requestHost, tenantHostPattern);
    if (!req.zoneInfo){
      return cb('Missing zone information');
    }
    iasOptions.tenant = tenant;
    iasOptions.url = 'https://' + req.zoneInfo.iasTenantUri;
    if (req.destinationCredentials && req.destinationCredentials.ias){
      iasOptions.clientid     = req.destinationCredentials.ias.clientid;
      iasOptions.clientsecret = req.destinationCredentials.ias.clientsecret;
      iasOptions.key          = req.destinationCredentials.ias.key ? req.destinationCredentials.ias.key : null;
      iasOptions.certificate  = req.destinationCredentials.ias.certificate ? req.destinationCredentials.ias.certificate : null;
      iasOptions.domain       = req.destinationCredentials.ias.domain;
      iasOptions.url          = req.destinationCredentials.ias.url;
    }
    cb(null, iasOptions);
  }
}

function getIasCredentials(req){
  return req && req.routerConfig && req.routerConfig.iasConfig && req.routerConfig.iasConfig.options.url ? req.routerConfig.iasConfig.options : null;
}

function getTenantComponents(tenant){
  if (!tenant || tenant.indexOf('--') < 0){
    return {
      subdomain: tenant
    };
  }
  let tenantParts = tenant.split('--');
  if (tenantParts.length !== 2){
    throw new Error('Wrong tenant structure, pattern should be: zoneid--iasTenant');
  }
  return {
    zoneId: urlUtils.addUUIDDashes(tenantParts[0]),
    iasTenant: tenantParts[1]
  };
}

function getZoneInfo(tenant,iasConfig,uaadomain, cb){
  let zoneInfo = null;
  if (!tenant){
    zoneInfo = {
      zoneId: iasConfig.zone_uuid,
      iasTenant: iasConfig.url.substring(8,iasConfig.url.indexOf(iasConfig.domain) - 1),
      iasTenantUri: iasConfig.url.substring(8)
    };
    return cb(null, zoneInfo);
  }
  let tenantComponents = getTenantComponents(tenant);
  if (tenantComponents.zoneId){
    zoneInfo = {
      zoneId: tenantComponents.zoneId,
      iasTenant: tenantComponents.iasTenant,
      iasTenantUri: tenantComponents.iasTenant + '.' + iasConfig.domain
    };
    return cb(null, zoneInfo);
  }
  let cachedZoneInfo = zoneInfoCache.get(tenantComponents.subdomain);
  if (cachedZoneInfo){
    return cb(null,cachedZoneInfo);
  }

  if (!uaadomain) {
    return cb(new Error('Can not get zone info by subdomain, xsuaa domain is missing'));
  }
  return exports.callZoneInfoAPI(uaadomain,tenantComponents.subdomain,zoneInfo,cb);
}

function callZoneInfoAPI(uaadomain, subdomain,zoneInfo, cb){
  let zoneInfoUrl = 'https://internal-xsuaa-osb.' + uaadomain + '/sap/rest/authorization/v2/zoneinfo/' + subdomain;
  request.get({url: zoneInfoUrl}, (err, res, body) => {
    if (err || res.statusCode !== 200){
      return cb(new Error('Failed to call get Zone and IAS tenant ' + err + ' response status ' + res.statusCode));
    }
    try {
      let responseJSON = JSON.parse(body);
      if (responseJSON.status === 'ACTIVE') {
        zoneInfo = {
          zoneId: responseJSON.zoneId,
          iasTenant: responseJSON.iasTenantUri.split('.')[0],
          iasTenantUri: responseJSON.iasTenantUri
        };
        zoneInfoCache.set(subdomain, zoneInfo);
      }
      cb(null, zoneInfo);
    } catch (err) {
      return cb(new Error('Failed to parse get Zone and IAS tenant response ' + err));
    }
  });
}