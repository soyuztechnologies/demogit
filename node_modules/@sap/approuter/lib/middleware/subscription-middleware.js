'use strict';
const vcapUtils = require('../utils/vcap-utils');
const subscriptionUtils = require('../utils/subscription-utils');
const SAAS_REGISTRY = 'saas-registry';
const SUBSCRIPTION_MANAGER = 'subscription-manager';
const PROCESS_TYPE_SAAS_REG_GET_DEPENDENCIES     = 'saasRegistryGetDependencies';
const PROCESS_TYPE_SAAS_REG_ON_SUBSCRIPTION      = 'saasRegistryOnSubscription';
const PROCESS_TYPE_SAAS_REG_ON_DEL_SUBSCRIPTION  = 'saasRegistryOnDeleteSubscription';
const PROCESS_TYPE_SMS_GET_DEPENDENCIES          = 'smsGetDependencies';
const PROCESS_TYPE_SMS_ON_SUBSCRIPTION           = 'smsOnSubscription';
const PROCESS_TYPE_SMS_ON_DEL_SUBSCRIPTION       = 'smsOnDeleteSubscription';

module.exports = function (req, res, next) {
  let saasRegistryCredentials = vcapUtils.getServiceCredentials({ label: SAAS_REGISTRY });
  let smsCredentials = vcapUtils.getServiceCredentials({ label: SUBSCRIPTION_MANAGER });

  let subscriptionProcessType = getSubscriptionProcessType(req, saasRegistryCredentials,smsCredentials);
  if (!subscriptionProcessType){
    return next();
  }

  if (subscriptionProcessType === PROCESS_TYPE_SAAS_REG_GET_DEPENDENCIES ||
      subscriptionProcessType === PROCESS_TYPE_SAAS_REG_ON_SUBSCRIPTION  ||
      subscriptionProcessType === PROCESS_TYPE_SAAS_REG_ON_DEL_SUBSCRIPTION){
    subscriptionUtils.checkScopes(req, function (err) {
      if (err) {
        return next(err);
      } else {
        if (subscriptionProcessType === PROCESS_TYPE_SAAS_REG_GET_DEPENDENCIES) {
          let dependencies = subscriptionUtils.getSaaSRegistryDependencies();
          res.setHeader('Content-Type', 'application/json');
          return res.end(JSON.stringify(dependencies));
        }
        if (subscriptionProcessType === PROCESS_TYPE_SAAS_REG_ON_SUBSCRIPTION) {
          subscriptionUtils.getSaaSRegistryApplicationUrl(req, function (err, url) {
            if (err) {
              return next(err);
            }
            return res.end(url);
          });
        }
        if (subscriptionProcessType === PROCESS_TYPE_SAAS_REG_ON_DEL_SUBSCRIPTION) {
          return res.end();
        }
      }
    });
  }

  if (subscriptionProcessType === PROCESS_TYPE_SMS_GET_DEPENDENCIES ||
      subscriptionProcessType === PROCESS_TYPE_SMS_ON_SUBSCRIPTION  ||
      subscriptionProcessType === PROCESS_TYPE_SMS_ON_DEL_SUBSCRIPTION){
    subscriptionUtils.checkCertificate(req, smsCredentials,function (err) {
      if (err) {
        return next(err);
      } else {
        if (subscriptionProcessType === PROCESS_TYPE_SMS_GET_DEPENDENCIES) {
          let dependencies = subscriptionUtils.getSMSDependencies();
          res.setHeader('Content-Type', 'application/json');
          return res.end(JSON.stringify(dependencies));
        }
        if (subscriptionProcessType === PROCESS_TYPE_SMS_ON_SUBSCRIPTION) {
          subscriptionUtils.getSMSApplicationUrl(req, smsCredentials,function (err, url) {
            if (err) {
              return next(err);
            }
            return res.end(JSON.stringify(url));
          });
        }
        if (subscriptionProcessType === PROCESS_TYPE_SMS_ON_DEL_SUBSCRIPTION) {
          return res.end();
        }
      }
    });
  }
};

function getSubscriptionProcessType(req, saasRegistryCredentials,smsCredentials) {
  if (!saasRegistryCredentials && !smsCredentials){
    return null;
  }
  if (smsCredentials){
    let callBackPath = subscriptionUtils.getSMSCallbackPath(smsCredentials);
    if (callBackPath.getDependenciesPrefix !== '' && req.url.startsWith(callBackPath.getDependenciesPrefix) && req.method === 'GET') {
      return PROCESS_TYPE_SMS_GET_DEPENDENCIES;
    }
    if (req.url.startsWith(callBackPath.onSubscriptionPrefix) && req.method === 'PUT') {
      return PROCESS_TYPE_SMS_ON_SUBSCRIPTION;
    }
    if (req.url.startsWith(callBackPath.onSubscriptionPrefix) && req.method === 'DELETE') {
      return PROCESS_TYPE_SMS_ON_DEL_SUBSCRIPTION;
    }
  }
  if (saasRegistryCredentials){
    let callBackPath = subscriptionUtils.getSaaSRegistryCallbackPath(saasRegistryCredentials);
    if (callBackPath.getDependenciesPath !== '' && req.url.startsWith(callBackPath.getDependenciesPath) && req.method === 'GET') {
      return PROCESS_TYPE_SAAS_REG_GET_DEPENDENCIES;
    }
    if (req.url.startsWith(callBackPath.onSubscriptionPrefix) && req.method === 'PUT') {
      return PROCESS_TYPE_SAAS_REG_ON_SUBSCRIPTION;
    }
    if (req.url.startsWith(callBackPath.onSubscriptionPrefix) && req.method === 'DELETE') {
      return PROCESS_TYPE_SAAS_REG_ON_DEL_SUBSCRIPTION;
    }
  }
  return null;
}