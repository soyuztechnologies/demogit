'use strict';

const bsUtils = require('../utils/business-service-utils');
const urlUtils = require('../utils/url-utils');
const uaaUtils = require('../utils/uaa-utils');
const configUtils = require('../utils/configuration-utils');
const drUtils = require('../utils/dynamic-routing-utils');
const cookie = require('cookie');
const urijs = require('urijs');
const svc2Approuter = require('./service-to-approuter-middleware');
const jwtDecode = require('jwt-decode');
const applicationLogUtils = require('../utils/application-logs-utils');

module.exports = function cacheServiceDestination(req, res, next) {
  if (!process.env.SAAS_APPROUTER || isExcluded(req.url)) {
    return next();
  }
  getTenant(req);
  cacheBSDestinations(req)
    .then(() => checkApprouterAuthorization(req))
    .then(() => getApplications(req, res))
    .then(() => downloadApplication(req, res))
    .then(() => getApplicationLogs(req, res))
    .then(() => next())
    .catch((err) => {
      next(err);
    });
};
function downloadApplication(req, res) {
  return new Promise((resolve) => {
    // eslint-disable-next-line no-undef
    const parsedUrl = urijs.parse(req.url);
    if (req.headers['x-approuter-authorization'] && parsedUrl.path.startsWith('/applications/content')) {
      resolve(bsUtils.downloadHTML5Application(req, res));
    } else {
      resolve();
    }
  });
}
function getApplicationLogs(req, res) {
  return new Promise((resolve) => {
    const parsedUrl = urijs.parse(req.url);
    if (req.headers['x-approuter-authorization'] && parsedUrl.path.startsWith('/applicationLogs')) {
      resolve(applicationLogUtils.getApplicationLogs(req, res));
    } else {
      resolve();
    }
  });
}
function getApplications(req, res) {
  return new Promise((resolve, reject) => {
    // eslint-disable-next-line no-undef
    const parsedUrl = urijs.parse(req.url);
    if (req.headers['x-approuter-authorization'] && parsedUrl.path === '/applications') {
      bsUtils.getHTML5Applications(req, function(err, html5Applications) {
        if (err) {
          return reject(err);
        } else {
          res.setHeader('Content-Type', 'application/json');
          res.end(JSON.stringify(html5Applications, null, 4));
        }
      });
    } else {
      resolve();
    }
  });
}
function cacheBSDestinations(req) {
  return new Promise((resolve, reject) => {
    if (req.headers['x-approuter-authorization'] && !req.headers['x-destination-cache']) {
      return resolve();
    }
    bsUtils.cacheBSDestinations(req, function(err) {
      if (err) {
        return reject(err);
      }
      var cookies = req.headers['cookie'] ? cookie.parse(req.headers['cookie']) : null;
      var source = cookies && cookies.locationAfterLogin ? {url: cookies.locationAfterLogin} : req;
      var appKey = drUtils.getApplicationKey(source);
      if (appKey && appKey.appPrefix) {
        var credentials = bsUtils.getCredentials(appKey.appPrefix, true, req);
        if (credentials && credentials.uaa) {
          req.destinationCredentials = credentials;
        }
      }
      resolve();
    });
  });
}
function checkApprouterAuthorization(req) {
  return new Promise((resolve, reject) => {
    if (req.headers['x-approuter-authorization']) {
      svc2Approuter(req, null, function(err) {
        if (err) {
          reject(err);
        } else {
          resolve();
        }
      });
    } else {
      resolve();
    }
  });
}
function getTenant(req) {
  const requestHost = urlUtils.getAppRouterHost(req);
  if (!process.env.TENANT_HOST_PATTERN && !req.headers['x-approuter-authorization']) {
    throw new Error('Tenant host pattern or x-approuter-authorization is not defined');
  }

  let urlTenant;
  if (process.env.TENANT_HOST_PATTERN) {
    const tenantHostPattern = configUtils.constructRegExp(process.env.TENANT_HOST_PATTERN);
    if (!tenantHostPattern) {
      throw new Error('Failed to extract tenant host pattern');
    }
    urlTenant = uaaUtils.retrieveTenantFromURL(requestHost, tenantHostPattern);
    if (!urlTenant) {
      throw new Error('Failed to determine url tenant');
    }
  }

  if (req.headers['x-approuter-authorization']) {
    if (req.headers['x-subscriber-tenant']) {
      req.tenant = req.headers['x-subscriber-tenant'];
    } else {
      const tokenDecoded = jwtDecode(req.headers['x-approuter-authorization']);
      req.tenant = tokenDecoded && tokenDecoded.ext_attr && tokenDecoded.ext_attr.zdn;
    }
    req.HTML5AppHost = req.headers['x-runtime-host'] ? req.headers['x-runtime-host'] : requestHost.replace(urlTenant, req.tenant);
  } else {
    req.tenant = urlTenant;
  }
}

function isExcluded(url) {
  if (!process.env.SAAS_APPROUTER_EXCLUDED_PATH) {
    return false;
  }
  try {
    const excludedPrefixes = JSON.parse(process.env.SAAS_APPROUTER_EXCLUDED_PATH);
    for (let i = 0; i <= excludedPrefixes.length; i++) {
      if (url.startsWith(excludedPrefixes[i])) {
        return true;
      }
    }
    return false;
  } catch (err) {
    throw new Error('Failed to parse SAAS_APPROUTER_EXCLUDED_PATH env. variable ' + err);
  }

}
