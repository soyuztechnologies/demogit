const libraryRootDir = __filename.slice(0, __filename.indexOf('html5-repo-mock') + 15);
const logs = [];
let MAX_LOGS = 10000;

const isLibraryFileItem = item => {
    const fileName = item.getFileName();
    return typeof fileName === 'string' && fileName !== __filename && fileName.startsWith(libraryRootDir);
};

const toStackTraceItem = item => ({
    fileName: item.getFileName().slice(libraryRootDir.length),
    functionName: item.getFunctionName(),
    lineNumber: item.getLineNumber(),
    columnNumber: item.getColumnNumber()
});

const originalPrepareStackTrace = Error.prepareStackTrace;
const getStackTrace = () => {
    let stack;
    Error.prepareStackTrace = (err, structuredStackTrace) => structuredStackTrace;
    try {
        throw new Error();
    } catch (err) {
        stack = err.stack;
    } finally {
        Error.prepareStackTrace = originalPrepareStackTrace;
    }
    return stack
        .filter(isLibraryFileItem)
        .map(toStackTraceItem);
};

const getStackTraceHTML = log => {
    const title = log.stack
        .map(item => `${item.fileName}:${item.lineNumber}:${item.columnNumber}`)
        .join('\n');
    const content = `${log.stack[0].fileName}:${log.stack[0].lineNumber}:${log.stack[0].columnNumber}`;
    return `<span title="${title}">${content}</span>`;
};

const getArgumentsHTML = (url, log) => {
    const args = log.args.map(arg => {
        if (typeof arg === 'string') {
            arg = arg.replace(/</gim, '&lt;').replace(/>/gim, '&gt;');
            if (arg.indexOf('(x-correlationid') > 0) {
                arg = arg.replace(
                    /(\(x-correlationid:\s*([0-9a-f-]{1,38})\))/,
                    `<a href='${url.split('?')[0]}?$format=html&$filter=$1'>$1</a>`
                );
            }
        }
        return arg;
    });
    return JSON.stringify(args);
};

/**
 * @type {object}
 * @property {function} debug
 * @property {function} log
 * @property {function} warn
 * @property {function} error
 * @property {function(url: string): function(req: object, res: object, next: function)} middleware
 *
 */
module.exports = {};

Object.keys(console).forEach(fn => {
    if (typeof console[fn] === 'function') {
        module.exports[fn] = (...args) => {
            const stack = getStackTrace();
            logs.push({time: (new Date()).toISOString(), fn, args, stack});
            if (logs.length > MAX_LOGS) {
                logs.splice(0, logs.length - MAX_LOGS);
            }
            fn !== 'debug' && console[fn].apply(console, args);
        };
    }
});

module.exports.middleware = url => function loggerMiddleware(req, res, next) {

    if (req.url.split('?')[0] === url) {
        const parsedUrl = new URL(req.url, 'http://localhost');
        const format = parsedUrl.searchParams.get('$format');
        const filter = parsedUrl.searchParams.get('$filter');
        const filteredLogs = filter ?
            logs.filter(item => item.args.some(arg => typeof arg === 'string' && arg.includes(filter))) :
            logs;

        switch (format) {
        case 'json':
            res.setHeader('Content-Type', 'application/json');
            return res.end(JSON.stringify(filteredLogs));
        case 'text':
            res.setHeader('Content-Type', 'text/plain');
            return res.end(
                filteredLogs
                    .map(log => `${log.time} ${log.fn.toUpperCase()} ${JSON.stringify(log.args)}`)
                    .join('\n')
            );
        case 'html':
        default:
            res.setHeader('Content-Type', 'text/html');
            return res.end(
                '<!DOCTYPE html>'+
                '<html lang="en">'+
                '<head>'+
                '<title>HTML5 Repo Mock Logs</title>'+
                '<style>'+
                ' td { padding: 0.25rem; font-family: monospace; }'+
                ' td:first-child { white-space: nowrap }'+
                ' .error { color: #f00; }'+
                ' .warn { color: #ffa500; }'+
                ' .debug { color: #999; }'+
                '</style>'+
                '</head>'+
                '<body>'+
                '<table width="100%" border="1" cellspacing="0">'+
                filteredLogs.map(log => `<tr class="${log.fn}">`+
                    `<td>${log.time}</td>`+
                    `<td>${log.fn.toUpperCase()}</td>`+
                    `<td>${getStackTraceHTML(log)}</td>` +
                    `<td>${getArgumentsHTML(req.url, log)}</td>`+
                    '</tr>'
                ).join('')+
                '</table>'+
                '</body>'+
                '</html>'
            );
        }
    }
    return next();
};
