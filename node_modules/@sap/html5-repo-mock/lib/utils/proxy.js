const http = require('http');
const https = require('https');
const console = require('./logger.js');

module.exports = (targetUri, req, res, responsePreprocessor) => {
    console.debug(
        `Forwarding: ${req.method} ${req.url} => ${targetUri}${req.url} `+
        `(x-correlationid: ${req.headers['x-correlationid']})`
    );
    const uri = new URL(targetUri);
    const outHeaders = {};
    ['Authorization'].forEach(key => {
        let value = req.headers[key.toLowerCase()];
        if (value) {
            outHeaders[key] = value;
        }
    });
    const outReq = (uri.protocol === 'https:' ? https : http).request({
        hostname: uri.hostname,
        port: uri.port,
        path: req.url,
        method: req.method,
        headers: outHeaders
    }, outRes => {
        console[outRes.statusCode >= 400 ? 'error' : 'debug'](
            `Response: ${outRes.statusCode} ${req.method} ${req.url} <= ${targetUri}${req.url} `+
            `(x-correlationid: ${req.headers['x-correlationid']})`
        );
        res.statusCode = outRes.statusCode;
        res.statusMessage = outRes.statusMessage;
        ['Content-Type', 'Expires', 'Last-Modified'].forEach(key => {
            let value = outRes.headers[key.toLowerCase()];
            if (value) {
                res.setHeader(key, value);
            }
        });
        if (typeof responsePreprocessor === 'function') {
            console.debug(
                `Collecting response body: ${outRes.statusCode} ${req.method} ${req.url} <= ${targetUri}${req.url} `+
                `(x-correlationid: ${req.headers['x-correlationid']})`
            );
            let body = Buffer.from('');
            outRes.on('data', chunk => {
                body = Buffer.concat([body, chunk]);
            });
            outRes.on('end', () => {
                console.debug(
                    `Preprocessing response: ${outRes.statusCode} ${req.method} ${req.url} <= ${targetUri}${req.url} `+
                    `(x-correlationid: ${req.headers['x-correlationid']})`
                );
                responsePreprocessor(body.toString('utf-8'), res);
            });
            return;
        }
        console.debug(
            `Piping response: ${outRes.statusCode} ${req.method} ${req.url} <= ${targetUri}${req.url} `+
            `(x-correlationid: ${req.headers['x-correlationid']})`
        );
        outRes.pipe(res);
    });
    outReq.on('error', (err) => {
        console.error(`Proxy error (x-correlationid: ${req.headers['x-correlationid']})`, err);
        res.statusCode = 500;
        res.statusMessage = 'Internal Server Error';
        res.end();
    });
    outReq.end();
};
