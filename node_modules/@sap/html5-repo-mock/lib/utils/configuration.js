const console = require('./logger.js');
const path = require('path');

const parseValue = val => {
    if (val) try {
        val = JSON.parse(val);
    } catch (e) { /* Do nothing */}
    if (typeof val === 'string') {
        val = val.split(',').map(s => s.trim());
    } else if (Array.isArray(val)) {
        val = val.reduce((acc, cur) => acc.concat(parseValue(cur)), []);
    }
    return val;
};

const get = args => name => {
    const idx = args.indexOf('--'+name);
    if (idx >= 0) {
        let val = [];
        for (let i = idx + 1; i < args.length && !args[i].startsWith('--'); i++) {
            val = val.concat(parseValue(args[i]));
        }
        return val;
    }
    return undefined;
};

const first = val => Array.isArray(val) && (val.length === 0 ? true : val[0]);

module.exports = {
    APIKey: undefined,
    arDir: undefined,
    arURL: undefined,
    destination: undefined,
    dir: undefined,
    flp: undefined,
    inject: undefined,
    login: undefined,
    lookupDirs: undefined,
    mimeTypes: undefined,
    port: undefined,
    relative: undefined,
    serviceInstanceDestination: undefined,
    ui5: undefined,
    ui5URL: undefined,
    welcomeFile: undefined,
    middleware: url => function configurationMiddleware(req, res, next) {
        if (req.url === url) {
            console.debug(
                `Returning configuration of html5-repo-mock (x-correlationid: ${req.headers['x-correlationid']})`
            );
            res.setHeader('Content-Type', 'application/json');
            return res.end(JSON.stringify(Object.keys(module.exports).reduce((acc, cur) => {
                if (typeof module.exports[cur] !== 'function') {
                    acc[cur] = module.exports[cur];
                }
                return acc;
            }, {})));
        }
        return next();
    },
    load({ env = {}, args = [] } = { env: {}, args: []}) {
        const arg = get(args);
        module.exports.APIKey = first(arg('APIKey')) || env.API_KEY || '';
        module.exports.arDir = first(arg('workingDirectory')) || env.AR_DIR || process.cwd();
        module.exports.arURL = first(arg('baseURL')) || env.AR_BASE || `http://localhost:${env.PORT || 5000}`;
        module.exports.destination = first(arg('destination')) || !!env.MOCK_DESTINATION || false;
        module.exports.dir = arg('mockDir') || parseValue(env.MOCK_DIR) || [ path.join(process.cwd(), '..') ];
        module.exports.flp = first(arg('flp')) || !!env.MOCK_FLP || false;
        module.exports.inject = arg('inject') || parseValue(env.MOCK_INJECT) || null;
        module.exports.login = first(arg('login')) || env.MOCK_LOGIN || '';
        module.exports.lookupDirs = arg('mockLookupDirs') || parseValue(env.MOCK_LOOKUP_DIRS) || ['', 'dist', 'webapp'];
        module.exports.mimeTypes = first(arg('mime-types')) || parseValue(env.MOCK_MIME_TYPES) || null;
        module.exports.port = first(arg('mockPort')) || env.MOCK_PORT || 5001;
        module.exports.relative = first(arg('relative')) || !!env.MOCK_RELATIVE || false;
        module.exports.serviceInstanceDestination = first(arg('service-instance-destination')) ||
            !!env.MOCK_SERVICE_INSTANCE_DESTINATION || false;
        module.exports.ui5 = first(arg('ui5')) || parseValue(env.MOCK_UI5) || null;
        module.exports.ui5URL = first(arg('sap-ui-bootstrap-url')) || env.SAP_UI_BOOTSTRAP_URL ||
            'https://sapui5.hana.ondemand.com';
        module.exports.welcomeFile = first(arg('standalone')) || env.MOCK_WELCOME || '';
        module.exports.load = () => {
            throw new Error(
                'Attempt to re-initialize configuration! ' +
                'Re-initialization of configuration is prohibited, ' +
                'because some configuration options may be already ' +
                'cached by modules and will not be updated.'
            );
        };
        return module.exports;
    }
};
