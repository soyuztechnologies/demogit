const console = require('./logger.js');

module.exports = (...handlers) => async (req, res) => {
    let i = 0;

    function handleError(err) {
        console.error(err.message, err);
        res.statusCode = err.code || 500;
        res.end();
    }

    function next(err) {
        if (err) {
            return handleError(err);
        }
        const handler = handlers[i++];
        if (typeof handler === 'function') {
            try {
                console.debug(
                    `Entering '${handler.name}' middleware (x-correlationid: ${req.headers['x-correlationid']})`
                );
                return handler(req, res, next);
            } catch (err) {
                return handleError(err);
            }
        } else if (i >= handlers.length) {
            return handleError(Object.assign(new Error(), {
                code: 501,
                message: `No registered handler is capable to process request ${req.method} ${req.url} `+
                    `(x-correlationid: ${req.headers['x-correlationid']})`
            }));
        } else {
            return next();
        }
    }

    console.debug(`${req.method} ${req.url} (x-correlationid: ${req.headers['x-correlationid']})`);
    next();
};
