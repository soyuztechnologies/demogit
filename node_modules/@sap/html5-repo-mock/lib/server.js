const http = require('http');
const conf = require('./utils/configuration.js');
const vcap = require('./utils/vcap.js');
const console = require('./utils/logger.js');
const connect = require('./utils/connect.js');
const { patchXsAppJson } = require('./utils/fs.js');
const destinationService = require('./services/destination/index.js');
const html5AppsRepoService = require('./services/html5-apps-repo/index.js');
const portalService = require('./services/portal/index.js');
const xsuaaService = require('./services/xsuaa/index.js');

module.exports.start = async () => {
    console.debug('Starting html5-repo-mock');

    // Load configuration
    console.debug('Loading configuration (from process.env and process.argv)');
    const { port, arDir } = conf.load({
        env: Object.assign({}, process.env),
        args: process.argv.slice()
    });

    // Initialise VCAP_SERVICES
    console.debug('Initializing VCAP_SERVICES from process.env');
    vcap.init(process.env);

    // Start mock server
    console.debug('Creating HTTP server for html5-repo-mock');
    try {
        http.createServer(connect(
            vcap.middleware('/vcap', process.env),
            conf.middleware('/conf'),
            console.middleware('/logs'),
            xsuaaService(),
            destinationService(),
            await portalService(),
            await html5AppsRepoService()
        )).listen(port, err => {
            if (err) {
                console.error('\nFailed to listen to port ' + port);
                process.exit(1);
            }
            console.log(`\nHTML5 Apps Repo Mock is running on port: ${port}\n`);

            // Apply VCAP_SERVICES overrides
            console.debug('Applying changed VCAP_SERVICES back to process.env');
            vcap.apply(process.env);

            // Patch central xs-app.json
            patchXsAppJson();

            // Start AppRouter
            console.debug('Require Approuter');
            const ar = require('@sap/approuter')();
            ar.cmdParser = false;
            ar.first.use(require('./middleware/welcome-file.js'));
            ar.beforeRequestHandler.use(require('./middleware/service-instance-destination.js'));
            console.debug('Starting Approuter');
            ar.start({
                workingDir: arDir
            });
        });
    } catch(err) {
        console.error('Failed to create HTTP server for html5-repo-mock', err);
        process.exit(1);
    }
};
