const console = require('../../utils/logger.js');

module.exports = () => {
    const { destination } = require('../../utils/configuration.js');
    const { add } = require('../../utils/vcap.js');

    if (destination) {
        const SUBACCOUNT_DESTINATIONS = /^\/destination-configuration\/v1\/subaccountDestinations$/;
        const SUBACCOUNT_DESTINATION = /^\/destination-configuration\/v1\/subaccountDestinations\/([^/]+)$/;
        const INSTANCE_DESTINATIONS = /^\/destination-configuration\/v1\/instanceDestinations$/;
        const INSTANCE_DESTINATION = /^\/destination-configuration\/v1\/instanceDestinations\/([^/]+)$/;
        const FIND_DESTINATION = /^\/destination-configuration\/v1\/destinations\/([^/]+)$/;

        add({
            service: 'destination',
            plan: 'light',
            tags: ['destination', 'conn', 'connsvc']
        });

        const destinationMiddleware = (req, res, next) => {
            if (req.url.startsWith('/destination-configuration/v1/')) {
                if (req.url.match(SUBACCOUNT_DESTINATIONS)) {
                    console.debug(
                        'Returning list of subaccount destinations '+
                        `(x-correlationid: ${req.headers['x-correlationid']})`
                    );
                    res.statusCode = 200;
                    res.setHeader('Content-Type', 'application/json');
                    return res.end('[]');
                }
                if (req.url.match(SUBACCOUNT_DESTINATION)) {
                    console.debug(
                        'Returning subaccount destination configuration '+
                        `(x-correlationid: ${req.headers['x-correlationid']})`
                    );
                    res.statusCode = 404;
                    return res.end();
                }
                if (req.url.match(INSTANCE_DESTINATIONS)) {
                    console.debug(
                        'Returning list of service instance destinations '+
                        `(x-correlationid: ${req.headers['x-correlationid']})`
                    );
                    res.statusCode = 200;
                    res.setHeader('Content-Type', 'application/json');
                    return res.end('[]');
                }
                if (req.url.match(INSTANCE_DESTINATION)) {
                    console.debug(
                        'Returning service instance destination configuration '+
                        `(x-correlationid: ${req.headers['x-correlationid']})`
                    );
                    res.statusCode = 404;
                    return res.end();
                }
                if (req.url.match(FIND_DESTINATION)) {
                    console.debug(
                        'Returning configuration for find destination '+
                        `(x-correlationid: ${req.headers['x-correlationid']})`
                    );
                    res.statusCode = 404;
                    return res.end();
                }
                const err = Object.assign(new Error(), {
                    code: 501,
                    message: 'Not Implemented'
                });
                return next(err);
            }
            return next();
        };
        return destinationMiddleware;
    }
    return undefined;
};
