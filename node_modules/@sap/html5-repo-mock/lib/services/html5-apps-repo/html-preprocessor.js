const console = require('../../utils/logger.js');
const jsdom = require('jsdom');
const RESOURCES_RE = /^(.*)(\/?)resources\//;
const TEST_RESOURCES_RE = /^(.*)(\/?)test-resources\//;

module.exports = function htmlPreprocessor(data, res) {
    const { ui5, ui5URL, inject } = require('../../utils/configuration.js');
    try {
        const dom = new jsdom.JSDOM(data, {
            features: {
                ProcessExternalResources: false
            }
        });
        const document = dom.window.document;
        const bootstrapScript = document.getElementById('sap-ui-bootstrap');

        // SAP UI5 URLs
        if (bootstrapScript && ui5URL && ui5 && typeof ui5 === 'object') {
            console.debug('Applying custom UI5 configuration to HTML file');
            const parsedUI5URL = new URL(ui5URL);
            for (const [key, value] of Object.entries(ui5)) {
                if (key === 'version') {
                    Array.from(document.querySelectorAll('[src],[href]')).forEach(element => {
                        const attrName = element.hasAttribute('src') ? 'src' : 'href';
                        const attr = element.getAttribute(attrName);
                        if (attr && (attr.match(RESOURCES_RE) || attr.match(TEST_RESOURCES_RE))) {
                            const url = new URL(attr, ui5URL);
                            url.protocol = parsedUI5URL.protocol;
                            url.hostname = parsedUI5URL.hostname;
                            url.pathname = url.pathname
                                .replace(TEST_RESOURCES_RE, `/${value}/test-resources/`)
                                .replace(RESOURCES_RE, `/${value}/resources/`);
                            element.setAttribute(attrName, url.toString());
                        }
                    });
                } else {
                    bootstrapScript.setAttribute('data-sap-ui-'+key, value);
                }
            }
        }

        // Inject content
        if (inject && typeof inject === 'object') {
            console.debug('Injecting content to HTML file');
            (Array.isArray(inject) ? inject : [inject]).forEach(item => {
                let nodes = [];
                if (item.script) {
                    const script = document.createElement('script');
                    script.setAttribute('src', item.script);
                    nodes = [script];
                } else if (item.content) {
                    const fragment = jsdom.JSDOM.fragment(item.content);
                    nodes = fragment.childNodes;
                }
                const append = {
                    'head-start': node => document.head.insertBefore(node, document.head.firstChild),
                    'head-end': node => document.head.insertBefore(node, null),
                    'body-start': node => document.body.insertBefore(node, document.body.firstChild),
                    'body-end': node => document.body.insertBefore(node, null)
                }[item.place];
                append && Array.from(nodes).forEach(append);
            });
        }

        data = dom.serialize();
    } catch(err) { /* Do nothing */ }
    console.debug('Returning preprocessed HTML file');
    return res.end(data);
};
