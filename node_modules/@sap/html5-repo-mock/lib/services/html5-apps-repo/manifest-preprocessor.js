const console = require('../../utils/logger.js');

module.exports = function manifestPreprocessor(data, res) {
    const { relative, APIKey } = require('../../utils/configuration.js');
    if (relative || APIKey) {
        try {
            const manifest = JSON.parse(data);

            // Remove leading slash from data source URIs
            if (relative) {
                console.debug('Removing leading slash in the dataSource URIs of the manifest.json', APIKey);
                const dataSources = manifest && manifest['sap.app'] && manifest['sap.app'].dataSources;
                if (dataSources) {
                    Object.values(dataSources).forEach(ds => {
                        if (ds.uri && ds.uri.startsWith('/')) {
                            ds.uri = ds.uri.slice(1);
                        }
                    });
                }
            }

            // Add APIKey header for SAP API Business Hub
            if (APIKey) {
                console.debug('Adding APIKey to the manifest.json', APIKey);
                const dataSources = manifest['sap.app'] && manifest['sap.app'].dataSources;
                const models = manifest['sap.ui5'] && manifest['sap.ui5'].models;
                if(models) {
                    Object.values(models).forEach(model => {
                        if (dataSources[model.dataSource] && dataSources[model.dataSource].type === 'OData') {
                            const version = dataSources[model.dataSource].settings &&
                                dataSources[model.dataSource].settings.odataVersion;
                            if (!model.settings && (version === '2.0' || version === '4.0')) {
                                model.settings = {};
                            }
                            if (version === '2.0') {
                                if (!model.settings.headers) {
                                    model.settings.headers = {};
                                }
                                model.settings.headers.APIKey = APIKey;
                            } else if (version === '4.0') {
                                if (!model.settings.httpHeaders) {
                                    model.settings.httpHeaders = {};
                                }
                                model.settings.httpHeaders.APIKey = APIKey;
                            }
                        }
                    });
                }
            }
            data = JSON.stringify(manifest);
            console.debug('Returning preprocessed manifest.json file');
            return res.end(data);
        } catch(err) {
            console.error('Failed to override manifest', err);
            return res.end(data);
        }
    }
    console.debug('Returning original manifest.json file without preprocessing');
    return res.end(data);
};
