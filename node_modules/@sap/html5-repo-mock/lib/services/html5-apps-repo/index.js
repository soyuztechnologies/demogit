const APPLICATIONS_METADATA = /\/applications\/metadata/;
const APPLICATION_FILES = /\/applications\/files\/path\/(.*)/;
const APPLICATION_FILE_CONTENT = /\/([^/]+)\/(.+)/;
const fs = require('fs');
const path = require('path');
const getContentType = require('./mime-types.js');
const { discover, listFiles } = require('./discovery.js');
const { add: addBusinessServiceBindings } = require('./busines-services.js');
const htmlPreprocessor = require('./html-preprocessor.js');
const manifestPreprocessor = require('./manifest-preprocessor.js');
const xsappPreprocessor = require('./xsapp-preprocessor.js');
const proxy = require('../../utils/proxy.js');
const console = require('../../utils/logger.js');
let port, dir, lookupDirs, ui5, mimeTypes, arURL;
let originalServiceUri;
let metadata = [];

const getAppMetadata = (appKey) => {
    const [applicationName, applicationVersion] = appKey.split('-');
    return applicationVersion ?
        metadata.find(cur => cur.applicationName === applicationName && cur.applicationVersion === applicationVersion) :
        metadata.reduce(
            (acc, cur) => (
                cur.applicationName === applicationName && (!acc || cur.applicationVersion > acc.applicationVersion)
            ) ? cur : acc,
            null
        );
};

const html5AppsRepoApplicationsMetadata = (req, res) => {
    if (originalServiceUri) {
        console.debug(
            'Trying to get remote applications metadata from html5-apps-repo '+
            `(x-correlationid: ${req.headers['x-correlationid']})`
        );
        return proxy(originalServiceUri, req, res, (data, res) => {
            res.setHeader('X-Source', 'Mixed');
            try {
                const remoteList = JSON.parse(data);
                const mergedList = JSON.stringify(metadata.concat(remoteList));
                console.debug(
                    'Returning merged applications metadata of local and remote html5-apps-repo '+
                    `(x-correlationid: ${req.headers['x-correlationid']})`
                );
                res.setHeader('Content-Type', 'application/json');
                res.end(mergedList);
            } catch (err) {
                console.error(
                    'Failed to get remote applications metadata from html5-apps-repo '+
                    `(x-correlationid: ${req.headers['x-correlationid']})`, err.toString()
                );
                res.end(data);
            }
        });
    }
    console.debug(
        'Returning applications metadata of local html5-apps-repo '+
        `(x-correlationid: ${req.headers['x-correlationid']})`
    );
    res.setHeader('X-Source', 'Local');
    res.setHeader('Content-Type', 'application/json');
    return res.end(JSON.stringify(metadata));
};

const html5AppsRepoApplicationFiles = async (req, res, appKey) => {
    const appMetadata = getAppMetadata(appKey);
    if (!appMetadata) {
        if (originalServiceUri) {
            console.debug(
                `Returning list of remote application files (x-correlationid: ${req.headers['x-correlationid']})`
            );
            res.setHeader('X-Source', 'Remote');
            return proxy(originalServiceUri, req, res);
        }
        console.error(
            `Failed to list application files. Application '${appKey}' not found locally and html5-apps-repo service `+
            `is not bound (x-correlationid: ${req.headers['x-correlationid']})`
        );
        res.statusCode = 503;
        res.setHeader('X-Source', 'Local');
        return res.end();
    }
    const list = (await listFiles(appMetadata.__dir))
        .map(cur => ({
            filePath: cur.endsWith('xs-app.json') ?
                cur.slice(appMetadata.__conf.length) :
                cur.slice(appMetadata.__dir.length)
        }));
    console.debug(`Returning list of local application files (x-correlationid: ${req.headers['x-correlationid']})`);
    res.setHeader('Content-Type', 'application/json');
    res.setHeader('X-Source', 'Local');
    return res.end(JSON.stringify(list));
};

const html5AppsRepoApplicationFileContent = async (req, res, appKey, filePath) => {
    const appMetadata = getAppMetadata(appKey);
    const contentType = getContentType(filePath, mimeTypes);
    const preprocessor = {
        'text/html': ui5 && htmlPreprocessor,
        'application/json': req.url.includes('/manifest.json') ? manifestPreprocessor :
            req.url.includes('/xs-app.json') ? xsappPreprocessor : undefined
    }[contentType];
    if (preprocessor) {
        console.debug(
            `Using '${preprocessor.name}' preprocessor for html5-apps-repo response `+
            `(x-correlationid: ${req.headers['x-correlationid']})`
        );
    } else {
        console.debug(
            'No preprocessor for html5-apps-repo response will be used '+
            `(x-correlationid: ${req.headers['x-correlationid']})`
        );
    }
    if (!appMetadata) {
        console.debug(
            `Application '${appKey}' not found in local html5-apps-repo `+
            `(x-correlationid: ${req.headers['x-correlationid']})`
        );
        res.setHeader('Content-Type', contentType);
        if (originalServiceUri) {
            console.debug(
                `Trying to get application '${appKey}' content from remote html5-apps-repo `+
                `(x-correlationid: ${req.headers['x-correlationid']})`
            );
            res.setHeader('X-Source', 'Remote');
            return proxy(originalServiceUri, req, res, preprocessor);
        }
        console.error(
            `Application '${appKey}' not found in local html5-apps-repo and there is no binding to `+
            `remote html5-apps-repo (x-correlationid: ${req.headers['x-correlationid']})`
        );
        res.statusCode = 503;
        res.setHeader('X-Source', 'Local');
        return res.end();
    }
    try {
        console.debug(
            `Application '${appKey}' found in local html5-apps-repo `+
            `(x-correlationid: ${req.headers['x-correlationid']})`
        );
        const fullPath = path.join(
            req.url.includes('/xs-app.json') ?
                appMetadata.__conf :
                appMetadata.__dir,
            filePath
        );
        console.debug(
            `Tying to access local html5-apps-repo file '${fullPath}' `+
            `(x-correlationid: ${req.headers['x-correlationid']})`
        );
        res.setHeader('X-Source', 'Local');
        res.setHeader('Content-Type', contentType);
        fs.accessSync(fullPath);
        if (preprocessor) {
            console.debug(
                'Reading local html5-apps-repo file for preprocessing '+
                `(x-correlationid: ${req.headers['x-correlationid']})`
            );
            return preprocessor(await fs.promises.readFile(fullPath), res);
        }
        console.debug(
            `Piping local html5-apps-repo file '${fullPath}' to response `+
            `(x-correlationid: ${req.headers['x-correlationid']})`
        );
        const readStream = fs.createReadStream(fullPath);
        return readStream.pipe(res);
    } catch(err) {
        if (err.syscall === 'access') {
            console[err.path.endsWith('favicon.ico') ? 'warn' : 'error'](
                `File not found in local html5-apps-repo '${err.path}' `+
                `(x-correlationid: ${req.headers['x-correlationid']})`
            );
            res.statusCode = 404;
            return res.end();
        } else {
            console.error(
                `Internal error in local html5-apps-repo (x-correlationid: ${req.headers['x-correlationid']})`,
                err
            );
            res.statusCode = 500;
            return res.end();
        }
    }
};

const html5AppsRepoMiddleware = (req, res, next) => {
    let match;
    if (req.method === 'GET') {
        if (req.url.match(APPLICATIONS_METADATA)) {
            console.debug(
                `Returning html5-apps-repo applications metadata (x-correlationid: ${req.headers['x-correlationid']})`
            );
            return html5AppsRepoApplicationsMetadata(req, res);
        }
        if ((match = req.url.match(APPLICATION_FILES))) {
            console.debug(
                `Returning html5-apps-repo application files list (x-correlationid: ${req.headers['x-correlationid']})`
            );
            return html5AppsRepoApplicationFiles(req, res, match[1].split('?')[0]);
        }
        if ((match = req.url.match(APPLICATION_FILE_CONTENT))) {
            console.debug(
                'Returning html5-apps-repo application file content '+
                `(x-correlationid: ${req.headers['x-correlationid']})`
            );
            return html5AppsRepoApplicationFileContent(req, res, match[1], match[2].split('?')[0]);
        }
        return next(Object.assign(
            new Error(
                `Resource for '${req.url}' not found in local html5-apps-repo `+
                `(x-correlationid: ${req.headers['x-correlationid']})`
            ),
            {code: 404}
        ));
    }
    return next();
};

module.exports = async () => {
    const vcap = require('../../utils/vcap.js');
    const conf = require('../../utils/configuration.js');
    port = conf.port;
    dir = conf.dir;
    lookupDirs = conf.lookupDirs;
    ui5 = conf.ui5;
    mimeTypes = conf.mimeTypes;
    arURL = conf.arURL + (conf.arURL.endsWith('/') ? '' : '/');
    if (vcap.has('html5-apps-repo')) {
        // If html5-repo-mock already have binding to
        // html5-apps-repo, save original service URI for
        // fallback and override existing binding URI to
        // point to html5-repo-mock server
        console.debug('Overriding URI of bound html5-apps-repo service');
        const srv = vcap.get('html5-apps-repo');
        originalServiceUri = srv.credentials.uri;
        srv.credentials.uri = `http://localhost:${port}`;
    } else {
        vcap.add({
            service: 'html5-apps-repo',
            plan: 'app-runtime',
            tags: ['html5appsrepo', 'html5-apps-repo-rt', 'html5-apps-rt', 'html5-apps-repo-dt', 'html5-apps-dt'],
            sapCloudService: 'html5-apps-repo-rt',
            grantType: 'client_credentials'
        });
    }

    // Discover all HTML5 applications
    console.debug('Starting discovery of applications available for local html5-apps-repo', dir, lookupDirs);
    metadata = await discover(dir, lookupDirs);

    // Add business services bindings for applications with sap.cloud/service
    addBusinessServiceBindings(metadata);

    // Print list of applications and URLs
    metadata.forEach(({
        applicationId: appId,
        applicationVersion: appVersion,
        applicationName: appName,
        sapCloudService
    }) => {
        if (sapCloudService) {
            const serviceName = sapCloudService.replace(/[.\\-]/g, '').toLowerCase();
            console.log(`\t${appId}@${appVersion}\t->\t${arURL}${serviceName}.${appName}-${appVersion}/`);
        }
        console.log(`\t${appId}@${appVersion}\t->\t${arURL}${appName}-${appVersion}/`);
    });

    return html5AppsRepoMiddleware;
};
