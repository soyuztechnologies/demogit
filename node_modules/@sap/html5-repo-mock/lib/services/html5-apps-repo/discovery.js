const fs = require('fs').promises;
const path = require('path');
const console = require('../../utils/logger.js');
const pom = require('./pom.js');
const APP_NAME = /^[a-zA-Z0-9_ ]+$/;
const APP_VERSION = /^(\d+\.){2}(\d+)$/;

const listFiles = async (basePath) => {
    const dirContents = await fs.readdir(basePath, { withFileTypes: true });
    let filePaths = [];
    for(let i=0; i<dirContents.length; i++) {
        const name = path.join(basePath, dirContents[i].name);
        if(dirContents[i].isFile()) {
            filePaths.push(name);
        } else if (dirContents[i].isDirectory()) {
            filePaths = filePaths.concat(await listFiles(name));
        }
    }
    return filePaths;
};

const discover = async (dir, lookupDirs) => {
    const baseDirs = (await fs.readdir(dir[0], { withFileTypes: true })).reduce((acc, cur) => {
        if(cur.isDirectory()) {
            acc.push(path.join(dir[0], cur.name));
        }
        return acc;
    }, dir.slice(0));
    return (await Promise.all(baseDirs.map(async baseDir => {
        try {
            await fs.access(path.join(baseDir, 'xs-app.json'));
            const interpolate = await pom(path.join(baseDir, 'pom.xml'));
            for (let lookupDir of lookupDirs) {
                const manifestPath = path.join(baseDir, lookupDir, 'manifest.json');
                try {
                    const manifest = JSON.parse(await fs.readFile(manifestPath, 'utf8'));
                    const appId = interpolate(manifest['sap.app'].id);
                    const appName = appId.replace(/[.-]/g, '');
                    const appVersion = interpolate(
                        manifest['sap.app'].applicationVersion.version
                    ).replace('-SNAPSHOT', '');
                    const sapCloudService = manifest['sap.cloud'] && manifest['sap.cloud'].service || '';
                    const isPublic = !!(manifest['sap.cloud'] && manifest['sap.cloud'].public);
                    if (!appName.match(APP_NAME)) {
                        return console.error(
                            `Error: ${manifestPath} contains invalid sap.app/id = "${manifest['sap.app'].id}". `+
                            'Only [a-zA-Z0-9.-_ ] are allowed (e.g. "my.app_Name1").\n'
                        );
                    }
                    if (!appVersion.match(APP_VERSION)) {
                        return console.error(
                            `Error: ${manifestPath} contains invalid sap.app/applicationVersion/version `+
                            `= "${appVersion}". Only three not negative numbers separated by dots are allowed `+
                            '(e.g. "1.0.0").\n'
                        );
                    }
                    return {
                        applicationId: appId,
                        applicationName: appName,
                        applicationVersion: appVersion,
                        sapCloudService: sapCloudService,
                        'public': isPublic,
                        __conf: baseDir,
                        __dir: path.join(baseDir, lookupDir)
                    };
                } catch(err) { /* Do nothing */ }
            }
        } catch(err) { /* Do nothing */ }
        return undefined;
    }))).filter(m => !!m);
};

module.exports.listFiles = listFiles;
module.exports.discover = discover;
