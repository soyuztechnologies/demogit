const console = require('../../utils/logger.js');
const fs = require('fs').promises;
const path = require('path');

function translate(dic, str) {
    if(!str) { return ''; }
    return String(str).replace(
        /{{([^}]+)}}/g,
        (val, key) => typeof dic[key] === 'undefined' ? ('\\{\\{' + key + '\\}\\}') : dic[key]
    );
}

module.exports = async meta => {
    try {
        const manifest = JSON.parse(await fs.readFile(path.join(meta.__dir, 'manifest.json'), 'utf8'));
        const i18n = (await fs.readFile(
            path.join(meta.__dir, manifest['sap.app'].i18n || 'i18n/i18n.properties'),
            'utf8'
        ).catch(()=>{
            console.warn(
                `No i18n.properties file found for ${meta.applicationName}-${meta.applicationVersion}. `+
                'Translations will not be applied!'
            );
            return '';
        }))
            .split('\n')
            .reduce((acc,cur) => {
                let match = cur.match(/([^=]+)=(.*)/);
                if(match && match.length === 3) {
                    acc[match[1]] = match[2];
                }
                return acc;
            },{});

        // If technology is UI5 and there are no intents, add default one
        if(manifest['sap.ui'] && manifest['sap.ui'].technology === 'UI5') {
            if (!manifest['sap.app'].crossNavigation) {
                manifest['sap.app'].crossNavigation = {};
            }
            if (!manifest['sap.app'].crossNavigation.inbounds) {
                manifest['sap.app'].crossNavigation.inbounds = {
                    [meta.applicationName.toLowerCase()+'Show']: {
                        semanticObject: meta.applicationName,
                        action: 'Show'
                    }
                };
            }
        }

        // Component with inbounds
        if (manifest['sap.app'].crossNavigation &&
            manifest['sap.app'].crossNavigation.inbounds &&
            Object.keys(manifest['sap.app'].crossNavigation.inbounds).length > 0
        ) {
            return Object.values(manifest['sap.app'].crossNavigation.inbounds).map(inbound => {
                return {
                    id: meta.applicationName + '_' + meta.applicationVersion,
                    size: '1x1',
                    tileType: 'sap.ushell.ui.tile.StaticTile',
                    title: translate(i18n, inbound.title) ||
                        translate(i18n, manifest['sap.app'].title) ||
                        (meta.applicationName + '-' + meta.applicationVersion),
                    properties: {
                        chipId: 'catalogTile_' + meta.applicationId + '_' + meta.applicationVersion,
                        title: translate(i18n, inbound.title || manifest['sap.app'].title) ||
                            (meta.applicationName + '-' + meta.applicationVersion),
                        subtitle: translate(i18n,
                            inbound.subTitle ||
                            manifest['sap.app'].subTitle ||
                            manifest['sap.app'].description
                        ),
                        icon: inbound.icon ||
                            (manifest['sap.ui'] && manifest['sap.ui'].icons && manifest['sap.ui'].icons.icon) ||
                            'sap-icon://product',
                        info: inbound.info || meta.applicationName + '-' + meta.applicationVersion,
                        targetURL: `#${inbound.semanticObject}-${inbound.action}`
                    }
                };
            });
        }

        // index.html (or other welcomeFile)
        return [{
            id: meta.applicationName + '_' + meta.applicationVersion,
            size: '1x1',
            tileType: 'sap.ushell.ui.tile.StaticTile',
            title: translate(i18n, manifest['sap.app'].title) || (meta.applicationName + '-' + meta.applicationVersion),
            properties: {
                chipId: 'catalogTile_' + manifest['sap.app'].id + '_' + meta.applicationVersion,
                title: translate(i18n, manifest['sap.app'].title) ||
                    (meta.applicationName + '-' + meta.applicationVersion),
                subtitle: translate(i18n, manifest['sap.app'].subTitle || manifest['sap.app'].description),
                icon: (manifest['sap.ui'] && manifest['sap.ui'].icons && manifest['sap.ui'].icons.icon)  ||
                    'sap-icon://product',
                info: meta.applicationName + '-' + meta.applicationVersion,
                targetURL: '/' + meta.applicationName + '-' + meta.applicationVersion
            }
        }];
    } catch(err) {
        return [{
            id: meta.applicationName + '_' + meta.applicationVersion,
            size: '1x1',
            tileType: 'sap.ushell.ui.tile.StaticTile',
            title: meta.applicationName + '-' + meta.applicationVersion,
            properties: {
                chipId: 'catalogTile_' + meta.applicationName + '_' + meta.applicationVersion,
                title: meta.applicationName + '-' + meta.applicationVersion,
                subtitle: err.message,
                icon: 'sap-icon://warning',
                info: 'Error',
                targetURL: '/' + meta.applicationName + '-' + meta.applicationVersion
            }
        }];
    }
};
