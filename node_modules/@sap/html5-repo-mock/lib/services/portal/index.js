const console = require('../../utils/logger.js');
const PORTAL_XSAPP_JSON = /\/portal\/xs-app\.json/;
const PORTAL_SITE = /\/portal\/site/;
const FIORI_SANDBOX_JS = /\/portal\/test-resources\/sap\/ushell\/bootstrap\/sandbox.js/;
const FIORI_SANDBOX_CONFIG = /\/portal\/test-resources\/sap\/ushell\/shells\/sandbox\/fioriSandboxConfig\.json/;
const UI5_CDN = /\/portal(\/.+)/;
const proxy = require('../../utils/proxy.js');
const getTiles = require('./tiles.js');
const getInbounds = require('./inbounds.js');
const modulePathPreprocessor = require('./module-path-preprocessor.js');
const htmlPreprocessor = require('../html5-apps-repo/html-preprocessor.js');
let metadata = [];
let isAuthRequired = false;
let cdn;

const portalXSAppJson = (req, res) => {
    res.setHeader('Content-Type', 'application/json');
    res.end(JSON.stringify({
        'authenticationMethod': isAuthRequired ? 'route' : 'none',
        'routes': [{
            'source': '^(.*)',
            'target': '$1',
            'service': 'html5-apps-repo-rt'
        }]
    }));
};

const portalSite = (req, res) => {
    res.statusCode = 302;
    res.setHeader('Location', 'test-resources/sap/ushell/shells/sandbox/fioriSandbox.html');
    res.end();
};

const fioriSandboxConfig = async (req, res) => {
    const tiles = [].concat(...await Promise.all(metadata.map(getTiles)));
    const inbounds = getInbounds(tiles);
    res.setHeader('Content-Type', 'application/json');
    res.end(JSON.stringify({
        services: {
            ClientSideTargetResolution: {
                adapter: {
                    config: {
                        inbounds
                    }
                }
            },
            LaunchPage: {
                adapter: {
                    config: {
                        catalogs: [],
                        groups: [{
                            id: 'mock_group',
                            isGroupLocked: false,
                            isPreset: true,
                            isVisible: true,
                            title: 'Workspace Applications',
                            tiles
                        }]
                    }
                }
            },
            NavTargetResolution: {
                config: {
                    enableClientSideTargetResolution: true
                }
            }
        }
    }));
};

const ui5CDN = (req, res, filePath, cdn) => {
    // Proxy request to UI5 CDN
    proxy(
        cdn,
        Object.assign({}, req, {url: filePath}),
        res,
        req.url.includes('/fioriSandbox.html') ? htmlPreprocessor : undefined
    );
};

const fioriSandboxJS = (req, res, cdn) => {
    // Add jQuery.registerModulePath(...) for all local applications
    proxy(
        cdn,
        Object.assign({}, req, {url: req.url.slice(7 /* '/portal'.length */)}),
        res,
        modulePathPreprocessor(metadata)
    );
};

const portalMiddleware = (req, res, next) => {
    let match;
    if (req.method === 'GET') {
        if (req.url.match(PORTAL_XSAPP_JSON)) {
            console.debug(
                `Returning portal xs-app.json (x-correlationid: ${req.headers['x-correlationid']})`
            );
            return portalXSAppJson(req, res);
        }
        if (req.url.match(PORTAL_SITE)) {
            console.debug(
                `Returning portal site (x-correlationid: ${req.headers['x-correlationid']})`
            );
            return portalSite(req, res);
        }
        if (req.url.match(FIORI_SANDBOX_JS)) {
            console.debug(
                'Returning portal fiori sandbox bootstrap script '+
                `(x-correlationid: ${req.headers['x-correlationid']})`
            );
            return fioriSandboxJS(req, res, cdn);
        }
        if (req.url.match(FIORI_SANDBOX_CONFIG)) {
            console.debug(
                `Returning portal fiori sandbox configuration (x-correlationid: ${req.headers['x-correlationid']})`
            );
            return fioriSandboxConfig(req, res);
        }
        if ((match = req.url.match(UI5_CDN))) {
            console.debug(
                `Returning portal resource from CDN (x-correlationid: ${req.headers['x-correlationid']})`
            );
            return ui5CDN(req, res, match[1], cdn);
        }
    }
    return next();
};

module.exports = async () => {
    const { port, flp, dir, lookupDirs, ui5URL } = require('../../utils/configuration');

    if (flp) {
        const { discover } = require('../html5-apps-repo/discovery.js');
        const { add, has } = require('../../utils/vcap.js');
        isAuthRequired = has('xsuaa');
        cdn = ui5URL;
        add({
            service: 'portal',
            plan: 'standard',
            tags: ['cp', 'portal', 'portal-service'],
            sapCloudService: 'cp',
            appHostId: '12345678-1234-1234-1234-123456789abc',
            endpoints: {
                'portal-service': `http://localhost:${port}`
            }
        });
        metadata = await discover(dir, lookupDirs);
        return portalMiddleware;
    }
    return undefined;
};
